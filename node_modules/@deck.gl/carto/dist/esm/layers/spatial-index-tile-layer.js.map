{"version":3,"sources":["../../../src/layers/spatial-index-tile-layer.ts"],"names":["registerLoaders","CartoRasterTileLoader","CartoSpatialTileLoader","TileLayer","isFeatureIdDefined","value","undefined","defaultProps","aggregationResLevel","SpatialIndexTileLayer","updateState","params","props","oldProps","setState","tileset","_updateAutoHighlight","info","hoveredFeatureId","state","hoveredFeature","object","newHoveredFeatureId","id","highlightColor","getSubLayerPropsByTile","tile","highlightedObjectIndex","getHighlightedObjectIndex","data","content","isFeatureIdPresent","Array","isArray","_featureInTile","findIndex","feature","featureId","tileZoom","getTileZoom","index","KEY","q","featureIndex","featureZoom","getParentIndex"],"mappings":"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","sourcesContent":["import {registerLoaders} from '@loaders.gl/core';\nimport {DefaultProps, UpdateParameters} from '@deck.gl/core';\nimport CartoRasterTileLoader from './schema/carto-raster-tile-loader';\nimport CartoSpatialTileLoader from './schema/carto-spatial-tile-loader';\nregisterLoaders([CartoRasterTileLoader, CartoSpatialTileLoader]);\n\nimport {PickingInfo} from '@deck.gl/core';\nimport {TileLayer, _Tile2DHeader as Tile2DHeader, TileLayerProps} from '@deck.gl/geo-layers';\n\nfunction isFeatureIdDefined(value: unknown): boolean {\n  return value !== undefined && value !== null && value !== '';\n}\n\nconst defaultProps: DefaultProps<SpatialIndexTileLayerProps> = {\n  aggregationResLevel: 4\n};\n\n/** All properties supported by SpatialIndexTileLayer. */\nexport type SpatialIndexTileLayerProps<DataT = any> = _SpatialIndexTileLayerProps<DataT> &\n  TileLayerProps<DataT>;\n\n/** Properties added by SpatialIndexTileLayer. */\ntype _SpatialIndexTileLayerProps<DataT = any> = {\n  aggregationResLevel?: number;\n};\n\nexport default class SpatialIndexTileLayer<\n  DataT = any,\n  ExtraProps extends {} = {}\n> extends TileLayer<DataT, ExtraProps & Required<_SpatialIndexTileLayerProps<DataT>>> {\n  static layerName = 'SpatialIndexTileLayer';\n  static defaultProps = defaultProps;\n\n  state!: TileLayer<DataT>['state'] & {\n    // TODO: tileset: Tileset2D should be generic for either H3Tileset2D or QuadbinTileset2D\n    hoveredFeatureId: BigInt | number | null;\n    highlightColor?: number[];\n  };\n\n  updateState(params: UpdateParameters<this>) {\n    const {props, oldProps} = params;\n    if (props.aggregationResLevel !== oldProps.aggregationResLevel) {\n      // Tileset cache is invalid when resLevel changes\n      this.setState({tileset: null});\n    }\n\n    super.updateState(params);\n  }\n\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    const {hoveredFeatureId} = this.state;\n    const hoveredFeature = info.object;\n    let newHoveredFeatureId: BigInt | number | null = null;\n\n    if (hoveredFeature) {\n      newHoveredFeatureId = hoveredFeature.id;\n    }\n\n    if (hoveredFeatureId !== newHoveredFeatureId) {\n      let {highlightColor} = this.props;\n      if (typeof highlightColor === 'function') {\n        highlightColor = highlightColor(info);\n      }\n\n      this.setState({\n        highlightColor,\n        hoveredFeatureId: newHoveredFeatureId\n      });\n    }\n  }\n\n  getSubLayerPropsByTile(tile: Tile2DHeader) {\n    return {\n      highlightedObjectIndex: this.getHighlightedObjectIndex(tile),\n      highlightColor: this.state.highlightColor\n    };\n  }\n\n  getHighlightedObjectIndex(tile: Tile2DHeader) {\n    const {hoveredFeatureId} = this.state;\n    const data = tile.content;\n\n    const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId);\n    if (\n      !isFeatureIdPresent ||\n      !Array.isArray(data) ||\n      // Quick check for whether id is within tile. data.findIndex is expensive\n      !this._featureInTile(tile, hoveredFeatureId!)\n    ) {\n      return -1;\n    }\n\n    return data.findIndex(feature => feature.id === hoveredFeatureId);\n  }\n\n  _featureInTile(tile: Tile2DHeader, featureId: BigInt | number) {\n    // TODO: Tile2DHeader index should be generic for H3TileIndex or QuadbinTileIndex\n    const tileset = this.state.tileset!;\n    const tileZoom = tileset.getTileZoom(tile.index);\n    // @ts-ignore\n    const KEY = tile.index.q ? 'q' : 'i';\n    // TODO - Tileset2D methods expect tile index in the shape of {x, y, z}\n    let featureIndex: any = {[KEY]: featureId};\n    let featureZoom = tileset.getTileZoom(featureIndex);\n    while (!(featureZoom <= tileZoom)) {\n      featureIndex = tileset.getParentIndex(featureIndex);\n      featureZoom = tileset.getTileZoom(featureIndex);\n    }\n\n    return featureIndex[KEY] === tile.index[KEY];\n  }\n}\n"],"file":"spatial-index-tile-layer.js"}