{
  "version": 3,
  "sources": ["../../@deck.gl/google-maps/src/utils.ts", "../../@deck.gl/google-maps/src/google-maps-overlay.ts"],
  "sourcesContent": ["/* global google, document */\nimport {Deck} from '@deck.gl/core';\nimport {Matrix4, Vector2} from '@math.gl/core';\nimport type {MjolnirGestureEvent, MjolnirPointerEvent} from 'mjolnir.js';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection#Formulas\nconst MAX_LATITUDE = 85.05113;\n\ntype UserData = {\n  _googleMap: google.maps.Map;\n  _eventListeners: Record<string, google.maps.MapsEventListener | null>;\n};\n\n/**\n * Get a new deck instance\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n * @param [deck] (Deck) - a previously created instances\n */\nexport function createDeckInstance(\n  map: google.maps.Map,\n  overlay: google.maps.OverlayView | google.maps.WebGLOverlayView,\n  deck: Deck | null | undefined,\n  props\n): Deck {\n  if (deck) {\n    if (deck.userData._googleMap === map) {\n      return deck;\n    }\n    // deck instance was created for a different map\n    destroyDeckInstance(deck);\n  }\n\n  const eventListeners = {\n    click: null,\n    rightclick: null,\n    dblclick: null,\n    mousemove: null,\n    mouseout: null\n  };\n\n  const newDeck = new Deck({\n    ...props,\n    useDevicePixels: props.interleaved ? true : props.useDevicePixels,\n    style: props.interleaved ? null : {pointerEvents: 'none'},\n    parent: getContainer(overlay, props.style),\n    initialViewState: {\n      longitude: 0,\n      latitude: 0,\n      zoom: 1\n    },\n    controller: false\n  });\n\n  // Register event listeners\n  for (const eventType in eventListeners) {\n    eventListeners[eventType] = map.addListener(eventType, evt =>\n      handleMouseEvent(newDeck, eventType, evt)\n    );\n  }\n\n  // Attach userData directly to Deck instance\n  (newDeck.userData as UserData)._googleMap = map;\n  (newDeck.userData as UserData)._eventListeners = eventListeners;\n\n  return newDeck;\n}\n\n// Create a container that will host the deck canvas and tooltip\nfunction getContainer(\n  overlay: google.maps.OverlayView | google.maps.WebGLOverlayView,\n  style?: Partial<CSSStyleDeclaration>\n): HTMLElement {\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  Object.assign(container.style, style);\n\n  // The DOM structure has a different structure depending on whether\n  // the Google map is rendered as vector or raster\n  if ('getPanes' in overlay) {\n    overlay.getPanes()?.overlayLayer.appendChild(container);\n  } else {\n    overlay.getMap()?.getDiv().appendChild(container);\n  }\n  return container;\n}\n\n/**\n * Safely remove a deck instance\n * @param deck (Deck) - a previously created instances\n */\nexport function destroyDeckInstance(deck: Deck) {\n  const {_eventListeners: eventListeners} = deck.userData;\n\n  // Unregister event listeners\n  for (const eventType in eventListeners) {\n    // Check that event listener was set before trying to remove.\n    if (eventListeners[eventType]) {\n      eventListeners[eventType].remove();\n    }\n  }\n\n  deck.finalize();\n}\n\n/* eslint-disable max-statements */\n/**\n * Get the current view state\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n */\n// eslint-disable-next-line complexity\nexport function getViewPropsFromOverlay(map: google.maps.Map, overlay: google.maps.OverlayView) {\n  const {width, height} = getMapSize(map);\n\n  // Canvas position relative to draggable map's container depends on\n  // overlayView's projection, not the map's. Have to use the center of the\n  // map for this, not the top left, for the same reason as above.\n  const projection = overlay.getProjection();\n\n  const bounds = map.getBounds();\n  if (!bounds) {\n    return {width, height, left: 0, top: 0};\n  }\n\n  const ne = bounds.getNorthEast();\n  const sw = bounds.getSouthWest();\n  const topRight = projection.fromLatLngToDivPixel(ne);\n  const bottomLeft = projection.fromLatLngToDivPixel(sw);\n\n  // google maps places overlays in a container anchored at the map center.\n  // the container CSS is manipulated during dragging.\n  // We need to update left/top of the deck canvas to match the base map.\n  const centerLngLat = pixelToLngLat(projection, width / 2, height / 2);\n  const centerH = new google.maps.LatLng(0, centerLngLat[0]);\n  const centerContainerPx = projection.fromLatLngToContainerPixel(centerH);\n  const centerDivPx = projection.fromLatLngToDivPixel(centerH);\n\n  if (!topRight || !bottomLeft || !centerDivPx || !centerContainerPx) {\n    return {width, height, left: 0, top: 0};\n  }\n  const leftOffset = Math.round(centerDivPx.x - centerContainerPx.x);\n  let topOffset = centerDivPx.y - centerContainerPx.y;\n\n  const topLngLat = pixelToLngLat(projection, width / 2, 0);\n  const bottomLngLat = pixelToLngLat(projection, width / 2, height);\n\n  // Compute fractional center.\n  let latitude = centerLngLat[1];\n  const longitude = centerLngLat[0];\n\n  // Adjust vertical offset - limit latitude\n  if (Math.abs(latitude) > MAX_LATITUDE) {\n    latitude = latitude > 0 ? MAX_LATITUDE : -MAX_LATITUDE;\n    const center = new google.maps.LatLng(latitude, longitude);\n    const centerPx = projection.fromLatLngToContainerPixel(center);\n    // @ts-ignore (TS2531) Object is possibly 'null'\n    topOffset += centerPx.y - height / 2;\n  }\n  topOffset = Math.round(topOffset);\n\n  // Compute fractional bearing\n  const delta = new Vector2(topLngLat).sub(bottomLngLat);\n  let bearing = (180 * delta.verticalAngle()) / Math.PI;\n  if (bearing < 0) bearing += 360;\n\n  // Maps sometimes returns undefined instead of 0\n  const heading = map.getHeading() || 0;\n\n  let zoom = (map.getZoom() as number) - 1;\n\n  let scale;\n\n  if (bearing === 0) {\n    // At full world view (always unrotated) simply compare height, as diagonal\n    // is incorrect due to multiple world copies\n    scale = height ? (bottomLeft.y - topRight.y) / height : 1;\n  } else if (bearing === heading) {\n    // Fractional zoom calculation only correct when bearing is not animating\n    const viewDiagonal = new Vector2([topRight.x, topRight.y])\n      .sub([bottomLeft.x, bottomLeft.y])\n      .len();\n    const mapDiagonal = new Vector2([width, -height]).len();\n    scale = mapDiagonal ? viewDiagonal / mapDiagonal : 1;\n  }\n\n  // When resizing aggressively, occasionally ne and sw are the same points\n  // See https://github.com/visgl/deck.gl/issues/4218\n  zoom += Math.log2(scale || 1);\n\n  return {\n    width,\n    height,\n    left: leftOffset,\n    top: topOffset,\n    zoom,\n    bearing,\n    pitch: map.getTilt(),\n    latitude,\n    longitude\n  };\n}\n\n/* eslint-enable max-statements */\n\n/**\n * Get the current view state\n * @param map (google.maps.Map) - The parent Map instance\n * @param transformer (google.maps.CoordinateTransformer) - A CoordinateTransformer instance\n */\nexport function getViewPropsFromCoordinateTransformer(\n  map: google.maps.Map,\n  transformer: google.maps.CoordinateTransformer\n) {\n  const {width, height} = getMapSize(map);\n  const {center, heading: bearing, tilt: pitch, zoom} = transformer.getCameraParams();\n\n  // Match Google projection matrix\n  const fovy = 25;\n  const aspect = height ? width / height : 1;\n\n  // Match depth range (crucial for correct z-sorting)\n  const near = 0.75;\n  const far = 300000000000000;\n  // const far = Infinity;\n\n  const projectionMatrix = new Matrix4().perspective({\n    fovy: (fovy * Math.PI) / 180,\n    aspect,\n    near,\n    far\n  });\n  const focalDistance = 0.5 * projectionMatrix[5];\n\n  return {\n    width,\n    height,\n    viewState: {\n      altitude: focalDistance,\n      bearing,\n      latitude: center.lat(),\n      longitude: center.lng(),\n      pitch,\n      projectionMatrix,\n      repeat: true,\n      zoom: zoom - 1\n    }\n  };\n}\n\nfunction getMapSize(map: google.maps.Map): {width: number; height: number} {\n  // The map fills the container div unless it's in fullscreen mode\n  // at which point the first child of the container is promoted\n  const container = map.getDiv().firstChild as HTMLElement | null;\n  return {\n    // @ts-ignore (TS2531) Object is possibly 'null'\n    width: container.offsetWidth,\n    // @ts-ignore (TS2531) Object is possibly 'null'\n    height: container.offsetHeight\n  };\n}\n\nfunction pixelToLngLat(\n  projection: google.maps.MapCanvasProjection,\n  x: number,\n  y: number\n): [longitude: number, latitude: number] {\n  const point = new google.maps.Point(x, y);\n  const latLng = projection.fromContainerPixelToLatLng(point);\n  // @ts-ignore (TS2531) Object is possibly 'null'\n  return [latLng.lng(), latLng.lat()];\n}\n\nfunction getEventPixel(event, deck: Deck): {x: number; y: number} {\n  if (event.pixel) {\n    return event.pixel;\n  }\n  // event.pixel may not exist when clicking on a POI\n  // https://developers.google.com/maps/documentation/javascript/reference/map#MouseEvent\n  const point = deck.getViewports()[0].project([event.latLng.lng(), event.latLng.lat()]);\n  return {\n    x: point[0],\n    y: point[1]\n  };\n}\n\n// Triggers picking on a mouse event\nfunction handleMouseEvent(deck: Deck, type: string, event) {\n  if (!deck.isInitialized) {\n    return;\n  }\n\n  const mockEvent: Record<string, any> = {\n    type,\n    offsetCenter: getEventPixel(event, deck),\n    srcEvent: event\n  };\n\n  switch (type) {\n    case 'click':\n    case 'rightclick':\n      mockEvent.type = 'click';\n      mockEvent.tapCount = 1;\n      // Hack: because we do not listen to pointer down, perform picking now\n      deck._onPointerDown(mockEvent as MjolnirPointerEvent);\n      deck._onEvent(mockEvent as MjolnirGestureEvent);\n      break;\n\n    case 'dblclick':\n      mockEvent.type = 'click';\n      mockEvent.tapCount = 2;\n      deck._onEvent(mockEvent as MjolnirGestureEvent);\n      break;\n\n    case 'mousemove':\n      mockEvent.type = 'pointermove';\n      deck._onPointerMove(mockEvent as MjolnirPointerEvent);\n      break;\n\n    case 'mouseout':\n      mockEvent.type = 'pointerleave';\n      deck._onPointerMove(mockEvent as MjolnirPointerEvent);\n      break;\n\n    default:\n      return;\n  }\n}\n", "/* global google */\nimport {getParameters, setParameters, withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {\n  createDeckInstance,\n  destroyDeckInstance,\n  getViewPropsFromOverlay,\n  getViewPropsFromCoordinateTransformer\n} from './utils';\nimport {Deck} from '@deck.gl/core';\n\nimport type {DeckProps} from '@deck.gl/core';\n\nconst HIDE_ALL_LAYERS = () => false;\nconst GL_STATE = {\n  depthMask: true,\n  depthTest: true,\n  blend: true,\n  blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n  blendEquation: GL.FUNC_ADD\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n\nconst defaultProps = {\n  interleaved: true\n};\n\nexport type GoogleMapsOverlayProps = DeckProps & {\n  interleaved?: boolean;\n};\n\nexport default class GoogleMapsOverlay {\n  private props: GoogleMapsOverlayProps = {};\n  private _map: google.maps.Map | null = null;\n  private _deck: Deck | null = null;\n  private _overlay: google.maps.WebGLOverlayView | google.maps.OverlayView | null = null;\n\n  constructor(props: GoogleMapsOverlayProps) {\n    this.setProps({...defaultProps, ...props});\n  }\n\n  /* Public API */\n\n  /** Add/remove the overlay from a map. */\n  setMap(map: google.maps.Map | null): void {\n    if (map === this._map) {\n      return;\n    }\n\n    const {VECTOR, UNINITIALIZED} = google.maps.RenderingType;\n    if (this._map) {\n      if (!map && this._map.getRenderingType() === VECTOR && this.props.interleaved) {\n        (this._overlay as google.maps.WebGLOverlayView).requestRedraw();\n      }\n      this._overlay?.setMap(null);\n      this._map = null;\n    }\n    if (map) {\n      this._map = map;\n      const renderingType = map.getRenderingType();\n      if (renderingType !== UNINITIALIZED) {\n        this._createOverlay(map);\n      } else {\n        map.addListener('renderingtype_changed', () => {\n          this._createOverlay(map);\n        });\n      }\n    }\n  }\n\n  /**\n   * Update (partial) props.\n   */\n  setProps(props: Partial<GoogleMapsOverlayProps>): void {\n    Object.assign(this.props, props);\n    if (this._deck) {\n      const canvas = this._deck.getCanvas();\n      if (props.style && canvas?.parentElement) {\n        const parentStyle = canvas.parentElement.style;\n        Object.assign(parentStyle, props.style);\n        props.style = null;\n      }\n      this._deck.setProps(props);\n    }\n  }\n\n  /** Equivalent of `deck.pickObject`. */\n  pickObject(params) {\n    return this._deck && this._deck.pickObject(params);\n  }\n\n  /** Equivalent of `deck.pickObjects`.  */\n  pickMultipleObjects(params) {\n    return this._deck && this._deck.pickMultipleObjects(params);\n  }\n\n  /** Equivalent of `deck.pickMultipleObjects`. */\n  pickObjects(params) {\n    return this._deck && this._deck.pickObjects(params);\n  }\n\n  /** Remove the overlay and release all underlying resources. */\n  finalize() {\n    this.setMap(null);\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n      this._deck = null;\n    }\n  }\n\n  /* Private API */\n  _createOverlay(map: google.maps.Map) {\n    const {interleaved} = this.props;\n    const {VECTOR, UNINITIALIZED} = google.maps.RenderingType;\n    const renderingType = map.getRenderingType();\n    if (renderingType === UNINITIALIZED) {\n      return;\n    }\n\n    const isVectorMap = renderingType === VECTOR && google.maps.WebGLOverlayView;\n    const OverlayView = isVectorMap ? google.maps.WebGLOverlayView : google.maps.OverlayView;\n    const overlay = new OverlayView();\n\n    if (overlay instanceof google.maps.WebGLOverlayView) {\n      if (interleaved) {\n        overlay.onAdd = noop;\n        overlay.onContextRestored = this._onContextRestored.bind(this);\n        overlay.onDraw = this._onDrawVectorInterleaved.bind(this);\n      } else {\n        overlay.onAdd = this._onAdd.bind(this);\n        overlay.onContextRestored = noop;\n        overlay.onDraw = this._onDrawVectorOverlay.bind(this);\n      }\n      overlay.onContextLost = this._onContextLost.bind(this);\n    } else {\n      overlay.onAdd = this._onAdd.bind(this);\n      overlay.draw = this._onDrawRaster.bind(this);\n    }\n    overlay.onRemove = this._onRemove.bind(this);\n\n    this._overlay = overlay;\n    this._overlay.setMap(map);\n  }\n\n  _onAdd() {\n    // @ts-ignore (TS2345) map is defined at this stage\n    this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);\n  }\n\n  _onContextRestored({gl}) {\n    if (!this._map || !this._overlay) {\n      return;\n    }\n    const _customRender = () => {\n      if (this._overlay) {\n        (this._overlay as google.maps.WebGLOverlayView).requestRedraw();\n      }\n    };\n    const deck = createDeckInstance(this._map, this._overlay, this._deck, {\n      gl,\n      _customRender,\n      ...this.props\n    });\n    this._deck = deck;\n\n    // By default, animationLoop._renderFrame invokes\n    // animationLoop.onRender. We override this to wrap\n    // in withParameters so we don't modify the GL state\n    // @ts-ignore accessing protected member\n    const {animationLoop} = deck;\n    animationLoop._renderFrame = () => {\n      const ab = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n      withParameters(gl, {}, () => {\n        animationLoop.onRender();\n      });\n      gl.bindBuffer(gl.ARRAY_BUFFER, ab);\n    };\n  }\n\n  _onContextLost() {\n    // TODO this isn't working\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n      this._deck = null;\n    }\n  }\n\n  _onRemove() {\n    this._deck?.setProps({layerFilter: HIDE_ALL_LAYERS});\n  }\n\n  _onDrawRaster() {\n    if (!this._deck || !this._map) {\n      return;\n    }\n    const deck = this._deck;\n\n    const {width, height, left, top, ...rest} = getViewPropsFromOverlay(\n      this._map,\n      this._overlay as google.maps.OverlayView\n    );\n\n    const canvas = deck.getCanvas();\n    if (canvas?.parentElement) {\n      const parentStyle = canvas.parentElement.style;\n      parentStyle.left = `${left}px`;\n      parentStyle.top = `${top}px`;\n    }\n\n    const altitude = 10000;\n    deck.setProps({\n      width,\n      height,\n      viewState: {altitude, repeat: true, ...rest}\n    });\n    // Deck is initialized\n    deck.redraw();\n  }\n\n  // Vector code path\n  _onDrawVectorInterleaved({gl, transformer}) {\n    if (!this._deck || !this._map) {\n      return;\n    }\n\n    const deck = this._deck;\n\n    deck.setProps({\n      ...getViewPropsFromCoordinateTransformer(this._map, transformer),\n\n      // Using external gl context - do not set css size\n      width: null,\n      height: null\n    });\n\n    if (deck.isInitialized) {\n      // As an optimization, some renders are to an separate framebuffer\n      // which we need to pass onto deck\n      const _framebuffer = getParameters(gl, GL.FRAMEBUFFER_BINDING);\n      deck.setProps({_framebuffer});\n\n      // Camera changed, will trigger a map repaint right after this\n      // Clear any change flag triggered by setting viewState so that deck does not request\n      // a second repaint\n      deck.needsRedraw({clearRedrawFlags: true});\n\n      // Workaround for bug in Google maps where viewport state is wrong\n      // TODO remove once fixed\n      setParameters(gl, {\n        viewport: [0, 0, gl.canvas.width, gl.canvas.height],\n        scissor: [0, 0, gl.canvas.width, gl.canvas.height],\n        stencilFunc: [gl.ALWAYS, 0, 255, gl.ALWAYS, 0, 255]\n      });\n\n      withParameters(gl, GL_STATE, () => {\n        deck._drawLayers('google-vector', {\n          clearCanvas: false\n        });\n      });\n    }\n  }\n\n  _onDrawVectorOverlay({transformer}) {\n    if (!this._deck || !this._map) {\n      return;\n    }\n\n    const deck = this._deck;\n\n    deck.setProps({\n      ...getViewPropsFromCoordinateTransformer(this._map, transformer)\n    });\n    deck.redraw();\n  }\n}\n"],
  "mappings": "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",
  "names": ["MAX_LATITUDE", "createDeckInstance", "map", "overlay", "deck", "props", "userData", "_googleMap", "destroyDeckInstance", "eventListeners", "click", "rightclick", "dblclick", "mousemove", "mouseout", "newDeck", "Deck", "useDevicePixels", "interleaved", "style", "pointerEvents", "parent", "getContainer", "initialViewState", "longitude", "latitude", "zoom", "controller", "eventType", "addListener", "evt", "handleMouseEvent", "_eventListeners", "container", "document", "createElement", "position", "Object", "assign", "getPanes", "overlayLayer", "appendChild", "getMap", "getDiv", "remove", "finalize", "getViewPropsFromOverlay", "width", "height", "getMapSize", "projection", "getProjection", "bounds", "getBounds", "left", "top", "ne", "getNorthEast", "sw", "getSouthWest", "topRight", "fromLatLngToDivPixel", "bottomLeft", "centerLngLat", "pixelToLngLat", "centerH", "google", "maps", "LatLng", "centerContainerPx", "fromLatLngToContainerPixel", "centerDivPx", "leftOffset", "Math", "round", "x", "topOffset", "y", "topLngLat", "bottomLngLat", "abs", "center", "centerPx", "delta", "Vector2", "sub", "bearing", "verticalAngle", "PI", "heading", "getHeading", "getZoom", "scale", "viewDiagonal", "len", "mapDiagonal", "log2", "pitch", "getTilt", "getViewPropsFromCoordinateTransformer", "transformer", "tilt", "getCameraParams", "fovy", "aspect", "near", "far", "projectionMatrix", "Matrix4", "perspective", "focalDistance", "viewState", "altitude", "lat", "lng", "repeat", "firstChild", "offsetWidth", "offsetHeight", "point", "Point", "latLng", "fromContainerPixelToLatLng", "getEventPixel", "event", "pixel", "getViewports", "project", "type", "isInitialized", "mockEvent", "offsetCenter", "srcEvent", "tapCount", "_onPointerDown", "_onEvent", "_onPointerMove", "HIDE_ALL_LAYERS", "GL_STATE", "depthMask", "depthTest", "blend", "blendFunc", "blendEquation", "noop", "defaultProps", "interleaved", "GoogleMapsOverlay", "constructor", "props", "setProps", "setMap", "map", "_map", "VECTOR", "UNINITIALIZED", "google", "maps", "RenderingType", "getRenderingType", "_overlay", "requestRedraw", "renderingType", "_createOverlay", "addListener", "Object", "assign", "_deck", "canvas", "getCanvas", "style", "parentElement", "parentStyle", "pickObject", "params", "pickMultipleObjects", "pickObjects", "finalize", "destroyDeckInstance", "isVectorMap", "WebGLOverlayView", "OverlayView", "overlay", "onAdd", "onContextRestored", "_onContextRestored", "bind", "onDraw", "_onDrawVectorInterleaved", "_onAdd", "_onDrawVectorOverlay", "onContextLost", "_onContextLost", "draw", "_onDrawRaster", "onRemove", "_onRemove", "createDeckInstance", "gl", "_customRender", "deck", "animationLoop", "_renderFrame", "ab", "getParameter", "withParameters", "onRender", "bindBuffer", "layerFilter", "width", "height", "left", "top", "rest", "getViewPropsFromOverlay", "altitude", "viewState", "repeat", "redraw", "transformer", "getViewPropsFromCoordinateTransformer", "isInitialized", "_framebuffer", "getParameters", "needsRedraw", "clearRedrawFlags", "setParameters", "viewport", "scissor", "stencilFunc", "_drawLayers", "clearCanvas"]
}
