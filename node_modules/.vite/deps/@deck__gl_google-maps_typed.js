import {
  Deck,
  Matrix4,
  Vector2,
  _defineProperty,
  getParameters,
  setParameters,
  withParameters
} from "./chunk-5OPRA3ES.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@deck.gl/google-maps/dist/esm/utils.js
var MAX_LATITUDE = 85.05113;
function createDeckInstance(map, overlay, deck, props) {
  if (deck) {
    if (deck.userData._googleMap === map) {
      return deck;
    }
    destroyDeckInstance(deck);
  }
  const eventListeners = {
    click: null,
    rightclick: null,
    dblclick: null,
    mousemove: null,
    mouseout: null
  };
  const newDeck = new Deck({
    ...props,
    useDevicePixels: props.interleaved ? true : props.useDevicePixels,
    style: props.interleaved ? null : {
      pointerEvents: "none"
    },
    parent: getContainer(overlay, props.style),
    initialViewState: {
      longitude: 0,
      latitude: 0,
      zoom: 1
    },
    controller: false
  });
  for (const eventType in eventListeners) {
    eventListeners[eventType] = map.addListener(eventType, (evt) => handleMouseEvent(newDeck, eventType, evt));
  }
  newDeck.userData._googleMap = map;
  newDeck.userData._eventListeners = eventListeners;
  return newDeck;
}
function getContainer(overlay, style) {
  const container = document.createElement("div");
  container.style.position = "absolute";
  Object.assign(container.style, style);
  if ("getPanes" in overlay) {
    var _overlay$getPanes;
    (_overlay$getPanes = overlay.getPanes()) === null || _overlay$getPanes === void 0 ? void 0 : _overlay$getPanes.overlayLayer.appendChild(container);
  } else {
    var _overlay$getMap;
    (_overlay$getMap = overlay.getMap()) === null || _overlay$getMap === void 0 ? void 0 : _overlay$getMap.getDiv().appendChild(container);
  }
  return container;
}
function destroyDeckInstance(deck) {
  const {
    _eventListeners: eventListeners
  } = deck.userData;
  for (const eventType in eventListeners) {
    if (eventListeners[eventType]) {
      eventListeners[eventType].remove();
    }
  }
  deck.finalize();
}
function getViewPropsFromOverlay(map, overlay) {
  const {
    width,
    height
  } = getMapSize(map);
  const projection = overlay.getProjection();
  const bounds = map.getBounds();
  if (!bounds) {
    return {
      width,
      height,
      left: 0,
      top: 0
    };
  }
  const ne = bounds.getNorthEast();
  const sw = bounds.getSouthWest();
  const topRight = projection.fromLatLngToDivPixel(ne);
  const bottomLeft = projection.fromLatLngToDivPixel(sw);
  const centerLngLat = pixelToLngLat(projection, width / 2, height / 2);
  const centerH = new google.maps.LatLng(0, centerLngLat[0]);
  const centerContainerPx = projection.fromLatLngToContainerPixel(centerH);
  const centerDivPx = projection.fromLatLngToDivPixel(centerH);
  if (!topRight || !bottomLeft || !centerDivPx || !centerContainerPx) {
    return {
      width,
      height,
      left: 0,
      top: 0
    };
  }
  const leftOffset = Math.round(centerDivPx.x - centerContainerPx.x);
  let topOffset = centerDivPx.y - centerContainerPx.y;
  const topLngLat = pixelToLngLat(projection, width / 2, 0);
  const bottomLngLat = pixelToLngLat(projection, width / 2, height);
  let latitude = centerLngLat[1];
  const longitude = centerLngLat[0];
  if (Math.abs(latitude) > MAX_LATITUDE) {
    latitude = latitude > 0 ? MAX_LATITUDE : -MAX_LATITUDE;
    const center = new google.maps.LatLng(latitude, longitude);
    const centerPx = projection.fromLatLngToContainerPixel(center);
    topOffset += centerPx.y - height / 2;
  }
  topOffset = Math.round(topOffset);
  const delta = new Vector2(topLngLat).sub(bottomLngLat);
  let bearing = 180 * delta.verticalAngle() / Math.PI;
  if (bearing < 0) bearing += 360;
  const heading = map.getHeading() || 0;
  let zoom = map.getZoom() - 1;
  let scale;
  if (bearing === 0) {
    scale = height ? (bottomLeft.y - topRight.y) / height : 1;
  } else if (bearing === heading) {
    const viewDiagonal = new Vector2([topRight.x, topRight.y]).sub([bottomLeft.x, bottomLeft.y]).len();
    const mapDiagonal = new Vector2([width, -height]).len();
    scale = mapDiagonal ? viewDiagonal / mapDiagonal : 1;
  }
  zoom += Math.log2(scale || 1);
  return {
    width,
    height,
    left: leftOffset,
    top: topOffset,
    zoom,
    bearing,
    pitch: map.getTilt(),
    latitude,
    longitude
  };
}
function getViewPropsFromCoordinateTransformer(map, transformer) {
  const {
    width,
    height
  } = getMapSize(map);
  const {
    center,
    heading: bearing,
    tilt: pitch,
    zoom
  } = transformer.getCameraParams();
  const fovy = 25;
  const aspect = height ? width / height : 1;
  const near = 0.75;
  const far = 3e14;
  const projectionMatrix = new Matrix4().perspective({
    fovy: fovy * Math.PI / 180,
    aspect,
    near,
    far
  });
  const focalDistance = 0.5 * projectionMatrix[5];
  return {
    width,
    height,
    viewState: {
      altitude: focalDistance,
      bearing,
      latitude: center.lat(),
      longitude: center.lng(),
      pitch,
      projectionMatrix,
      repeat: true,
      zoom: zoom - 1
    }
  };
}
function getMapSize(map) {
  const container = map.getDiv().firstChild;
  return {
    width: container.offsetWidth,
    height: container.offsetHeight
  };
}
function pixelToLngLat(projection, x, y) {
  const point = new google.maps.Point(x, y);
  const latLng = projection.fromContainerPixelToLatLng(point);
  return [latLng.lng(), latLng.lat()];
}
function getEventPixel(event, deck) {
  if (event.pixel) {
    return event.pixel;
  }
  const point = deck.getViewports()[0].project([event.latLng.lng(), event.latLng.lat()]);
  return {
    x: point[0],
    y: point[1]
  };
}
function handleMouseEvent(deck, type, event) {
  if (!deck.isInitialized) {
    return;
  }
  const mockEvent = {
    type,
    offsetCenter: getEventPixel(event, deck),
    srcEvent: event
  };
  switch (type) {
    case "click":
    case "rightclick":
      mockEvent.type = "click";
      mockEvent.tapCount = 1;
      deck._onPointerDown(mockEvent);
      deck._onEvent(mockEvent);
      break;
    case "dblclick":
      mockEvent.type = "click";
      mockEvent.tapCount = 2;
      deck._onEvent(mockEvent);
      break;
    case "mousemove":
      mockEvent.type = "pointermove";
      deck._onPointerMove(mockEvent);
      break;
    case "mouseout":
      mockEvent.type = "pointerleave";
      deck._onPointerMove(mockEvent);
      break;
    default:
      return;
  }
}

// node_modules/@deck.gl/google-maps/dist/esm/google-maps-overlay.js
var HIDE_ALL_LAYERS = () => false;
var GL_STATE = {
  depthMask: true,
  depthTest: true,
  blend: true,
  blendFunc: [770, 771, 1, 771],
  blendEquation: 32774
};
function noop() {
}
var defaultProps = {
  interleaved: true
};
var GoogleMapsOverlay = class {
  constructor(props) {
    _defineProperty(this, "props", {});
    _defineProperty(this, "_map", null);
    _defineProperty(this, "_deck", null);
    _defineProperty(this, "_overlay", null);
    this.setProps({
      ...defaultProps,
      ...props
    });
  }
  setMap(map) {
    if (map === this._map) {
      return;
    }
    const {
      VECTOR,
      UNINITIALIZED
    } = google.maps.RenderingType;
    if (this._map) {
      var _this$_overlay;
      if (!map && this._map.getRenderingType() === VECTOR && this.props.interleaved) {
        this._overlay.requestRedraw();
      }
      (_this$_overlay = this._overlay) === null || _this$_overlay === void 0 ? void 0 : _this$_overlay.setMap(null);
      this._map = null;
    }
    if (map) {
      this._map = map;
      const renderingType = map.getRenderingType();
      if (renderingType !== UNINITIALIZED) {
        this._createOverlay(map);
      } else {
        map.addListener("renderingtype_changed", () => {
          this._createOverlay(map);
        });
      }
    }
  }
  setProps(props) {
    Object.assign(this.props, props);
    if (this._deck) {
      const canvas = this._deck.getCanvas();
      if (props.style && canvas !== null && canvas !== void 0 && canvas.parentElement) {
        const parentStyle = canvas.parentElement.style;
        Object.assign(parentStyle, props.style);
        props.style = null;
      }
      this._deck.setProps(props);
    }
  }
  pickObject(params) {
    return this._deck && this._deck.pickObject(params);
  }
  pickMultipleObjects(params) {
    return this._deck && this._deck.pickMultipleObjects(params);
  }
  pickObjects(params) {
    return this._deck && this._deck.pickObjects(params);
  }
  finalize() {
    this.setMap(null);
    if (this._deck) {
      destroyDeckInstance(this._deck);
      this._deck = null;
    }
  }
  _createOverlay(map) {
    const {
      interleaved
    } = this.props;
    const {
      VECTOR,
      UNINITIALIZED
    } = google.maps.RenderingType;
    const renderingType = map.getRenderingType();
    if (renderingType === UNINITIALIZED) {
      return;
    }
    const isVectorMap = renderingType === VECTOR && google.maps.WebGLOverlayView;
    const OverlayView = isVectorMap ? google.maps.WebGLOverlayView : google.maps.OverlayView;
    const overlay = new OverlayView();
    if (overlay instanceof google.maps.WebGLOverlayView) {
      if (interleaved) {
        overlay.onAdd = noop;
        overlay.onContextRestored = this._onContextRestored.bind(this);
        overlay.onDraw = this._onDrawVectorInterleaved.bind(this);
      } else {
        overlay.onAdd = this._onAdd.bind(this);
        overlay.onContextRestored = noop;
        overlay.onDraw = this._onDrawVectorOverlay.bind(this);
      }
      overlay.onContextLost = this._onContextLost.bind(this);
    } else {
      overlay.onAdd = this._onAdd.bind(this);
      overlay.draw = this._onDrawRaster.bind(this);
    }
    overlay.onRemove = this._onRemove.bind(this);
    this._overlay = overlay;
    this._overlay.setMap(map);
  }
  _onAdd() {
    this._deck = createDeckInstance(this._map, this._overlay, this._deck, this.props);
  }
  _onContextRestored({
    gl
  }) {
    if (!this._map || !this._overlay) {
      return;
    }
    const _customRender = () => {
      if (this._overlay) {
        this._overlay.requestRedraw();
      }
    };
    const deck = createDeckInstance(this._map, this._overlay, this._deck, {
      gl,
      _customRender,
      ...this.props
    });
    this._deck = deck;
    const {
      animationLoop
    } = deck;
    animationLoop._renderFrame = () => {
      const ab = gl.getParameter(34964);
      withParameters(gl, {}, () => {
        animationLoop.onRender();
      });
      gl.bindBuffer(34962, ab);
    };
  }
  _onContextLost() {
    if (this._deck) {
      destroyDeckInstance(this._deck);
      this._deck = null;
    }
  }
  _onRemove() {
    var _this$_deck;
    (_this$_deck = this._deck) === null || _this$_deck === void 0 ? void 0 : _this$_deck.setProps({
      layerFilter: HIDE_ALL_LAYERS
    });
  }
  _onDrawRaster() {
    if (!this._deck || !this._map) {
      return;
    }
    const deck = this._deck;
    const {
      width,
      height,
      left,
      top,
      ...rest
    } = getViewPropsFromOverlay(this._map, this._overlay);
    const canvas = deck.getCanvas();
    if (canvas !== null && canvas !== void 0 && canvas.parentElement) {
      const parentStyle = canvas.parentElement.style;
      parentStyle.left = "".concat(left, "px");
      parentStyle.top = "".concat(top, "px");
    }
    const altitude = 1e4;
    deck.setProps({
      width,
      height,
      viewState: {
        altitude,
        repeat: true,
        ...rest
      }
    });
    deck.redraw();
  }
  _onDrawVectorInterleaved({
    gl,
    transformer
  }) {
    if (!this._deck || !this._map) {
      return;
    }
    const deck = this._deck;
    deck.setProps({
      ...getViewPropsFromCoordinateTransformer(this._map, transformer),
      width: null,
      height: null
    });
    if (deck.isInitialized) {
      const _framebuffer = getParameters(gl, 36006);
      deck.setProps({
        _framebuffer
      });
      deck.needsRedraw({
        clearRedrawFlags: true
      });
      setParameters(gl, {
        viewport: [0, 0, gl.canvas.width, gl.canvas.height],
        scissor: [0, 0, gl.canvas.width, gl.canvas.height],
        stencilFunc: [519, 0, 255, 519, 0, 255]
      });
      withParameters(gl, GL_STATE, () => {
        deck._drawLayers("google-vector", {
          clearCanvas: false
        });
      });
    }
  }
  _onDrawVectorOverlay({
    transformer
  }) {
    if (!this._deck || !this._map) {
      return;
    }
    const deck = this._deck;
    deck.setProps({
      ...getViewPropsFromCoordinateTransformer(this._map, transformer)
    });
    deck.redraw();
  }
};
export {
  GoogleMapsOverlay
};
//# sourceMappingURL=@deck__gl_google-maps_typed.js.map
