{"version":3,"file":"primitive-iterator.js","names":["_constants","require","_modes","_loaderUtils","makePrimitiveIterator","indices","attributes","arguments","length","undefined","mode","start","end","values","value","info","type","getPrimitiveModeType","i1","i2","i3","i","GL","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","assert"],"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"],"mappings":"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"}