{"version":3,"file":"tile-3d-batch-table.js","names":["_loaderUtils","require","_tile3dAccessorUtils","_tile3dBatchTableHierarchy","defined","x","undefined","clone","y","IGNORED_PROPERTY_FIELDS","HIERARCHY","extensions","extras","Tile3DBatchTableParser","constructor","json","binary","featureCount","_this$json","options","arguments","length","_defineProperty2","default","assert","_extensions","_properties","propertyName","_binaryProperties","_initializeBinaryProperties","_hierarchy","initializeHierarchy","getExtension","extensionName","memorySizeInBytes","isClass","batchId","className","_checkBatchId","result","traverseHierarchy","hierarchy","instanceIndex","classId","classIds","instanceClass","classes","name","isExactClass","getExactClassName","hasProperty","_hasPropertyInHierarchy","getPropertyNames","results","propertyNames","Object","keys","push","_getPropertyNamesInHierarchy","getProperty","binaryProperty","_getBinaryProperty","propertyValues","hierarchyProperty","_getHierarchyProperty","setProperty","value","_setBinaryProperty","_setHierarchyProperty","Array","valid","Error","index","unpack","typedArray","pack","binaryProperties","property","_initializeBinaryProperty","tile3DAccessor","concat","type","accessor","createTypedArrayFromAccessor","buffer","byteOffset","values","componentCount","size","unpacker","packer","instances","hasOwnProperty","indexOf","indexInClass","classIndexes","batchTable","exports"],"sources":["../../../../src/lib/classes/tile-3d-batch-table.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\nimport {createTypedArrayFromAccessor} from './helpers/tile-3d-accessor-utils';\nimport {initializeHierarchy, traverseHierarchy} from './tile-3d-batch-table-hierarchy';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nconst clone = (x, y) => x;\n\n// These top level fields in the batch table json are not properties\nconst IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true, // Deprecated HIERARCHY property\n  extensions: true,\n  extras: true\n};\n\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nexport default class Tile3DBatchTableParser {\n  json;\n  binary;\n  featureCount;\n  _extensions;\n  // Copy all top-level property fields from the json object, ignoring special fields\n  _properties;\n  _binaryProperties;\n  // TODO: hierarchy support is only partially implemented and not tested\n  _hierarchy;\n\n  constructor(json, binary, featureCount, options = {}) {\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n\n    this._extensions = this.json?.extensions || {};\n\n    // Copy all top-level property fields from the json object, ignoring special fields\n    this._properties = {};\n    for (const propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n\n    this._binaryProperties = this._initializeBinaryProperties();\n\n    // TODO: hierarchy support is only partially implemented and not tested\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n\n  getExtension(extensionName) {\n    return this.json && this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  memorySizeInBytes(): number {\n    return 0;\n  }\n\n  isClass(batchId, className: string): boolean {\n    this._checkBatchId(batchId);\n    assert(typeof className === 'string', className);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      // PERFORMANCE_IDEA : cache results in the ancestor classes\n      //   to speed up this check if this area becomes a hotspot\n      // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n        const classId = hierarchy.classIds[instanceIndex];\n        const instanceClass = hierarchy.classes[classId];\n        return instanceClass.name === className;\n      });\n      return defined(result);\n    }\n\n    return false;\n  }\n\n  isExactClass(batchId, className) {\n    assert(typeof className === 'string', className);\n\n    return this.getExactClassName(batchId) === className;\n  }\n\n  getExactClassName(batchId) {\n    this._checkBatchId(batchId);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const classId = this._hierarchy.classIds[batchId];\n      const instanceClass = this._hierarchy.classes[classId];\n      return instanceClass.name;\n    }\n\n    return undefined;\n  }\n\n  hasProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n  }\n\n  getPropertyNames(batchId, results) {\n    this._checkBatchId(batchId);\n\n    results = defined(results) ? results : [];\n    results.length = 0;\n\n    const propertyNames = Object.keys(this._properties);\n    results.push(...propertyNames);\n\n    if (this._hierarchy) {\n      this._getPropertyNamesInHierarchy(batchId, results);\n    }\n\n    return results;\n  }\n\n  getProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (defined(binaryProperty)) {\n        return this._getBinaryProperty(binaryProperty, batchId);\n      }\n    }\n\n    const propertyValues = this._properties[name];\n    if (defined(propertyValues)) {\n      return clone(propertyValues[batchId], true);\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const hierarchyProperty = this._getHierarchyProperty(batchId, name);\n      if (defined(hierarchyProperty)) {\n        return hierarchyProperty;\n      }\n    }\n\n    return undefined;\n  }\n\n  setProperty(batchId, name, value) {\n    const featureCount = this.featureCount;\n\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (binaryProperty) {\n        this._setBinaryProperty(binaryProperty, batchId, value);\n        return;\n      }\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      if (this._setHierarchyProperty(this, batchId, name, value)) {\n        return;\n      }\n    }\n\n    let propertyValues = this._properties[name];\n    if (!defined(propertyValues)) {\n      // Property does not exist. Create it.\n      this._properties[name] = new Array(featureCount);\n      propertyValues = this._properties[name];\n    }\n\n    propertyValues[batchId] = clone(value, true);\n  }\n\n  // PRIVATE METHODS\n\n  _checkBatchId(batchId) {\n    const valid = batchId >= 0 && batchId < this.featureCount;\n    if (!valid) {\n      throw new Error('batchId not in range [0, featureCount - 1].');\n    }\n  }\n\n  _getBinaryProperty(binaryProperty, index) {\n    return binaryProperty.unpack(binaryProperty.typedArray, index);\n  }\n\n  _setBinaryProperty(binaryProperty, index, value) {\n    binaryProperty.pack(value, binaryProperty.typedArray, index);\n  }\n\n  _initializeBinaryProperties() {\n    let binaryProperties: Record<string, any> | null = null;\n    for (const name in this._properties) {\n      const property = this._properties[name];\n      const binaryProperty = this._initializeBinaryProperty(name, property);\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      if (binaryProperty) {\n        binaryProperties = binaryProperties || {};\n        binaryProperties[name] = binaryProperty;\n      }\n    }\n    return binaryProperties;\n  }\n\n  _initializeBinaryProperty(name, property) {\n    if ('byteOffset' in property) {\n      // This is a binary property\n      const tile3DAccessor = property;\n\n      assert(this.binary, `Property ${name} requires a batch table binary.`);\n      assert(tile3DAccessor.type, `Property ${name} requires a type.`);\n\n      const accessor = createTypedArrayFromAccessor(\n        tile3DAccessor,\n        this.binary.buffer,\n        this.binary.byteOffset | 0,\n        this.featureCount\n      );\n\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      return {\n        typedArray: accessor.values,\n        componentCount: accessor.size,\n        unpack: accessor.unpacker,\n        pack: accessor.packer\n      };\n    }\n\n    return null;\n  }\n\n  //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy\n\n  _hasPropertyInHierarchy(batchId, name) {\n    if (!this._hierarchy) {\n      return false;\n    }\n\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      return defined(instances[name]);\n    });\n\n    return defined(result);\n  }\n\n  _getPropertyNamesInHierarchy(batchId, results) {\n    traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      for (const name in instances) {\n        if (instances.hasOwnProperty(name)) {\n          if (results.indexOf(name) === -1) {\n            results.push(name);\n          }\n        }\n      }\n    });\n  }\n\n  _getHierarchyProperty(batchId, name) {\n    return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        if (defined(propertyValues.typedArray)) {\n          return this._getBinaryProperty(propertyValues, indexInClass);\n        }\n        return clone(propertyValues[indexInClass], true);\n      }\n      return null;\n    });\n  }\n\n  _setHierarchyProperty(batchTable, batchId, name, value) {\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        assert(instanceIndex === batchId, `Inherited property \"${name}\" is read-only.`);\n        if (defined(propertyValues.typedArray)) {\n          this._setBinaryProperty(propertyValues, indexInClass, value);\n        } else {\n          propertyValues[indexInClass] = clone(value, true);\n        }\n        return true;\n      }\n      return false;\n    });\n    return defined(result);\n  }\n}\n"],"mappings":";;;;;;;;AAGA,IAAAA,YAAA,GAAAC,OAAA;AAEA,IAAAC,oBAAA,GAAAD,OAAA;AACA,IAAAE,0BAAA,GAAAF,OAAA;AAEA,SAASG,OAAOA,CAACC,CAAC,EAAE;EAClB,OAAOA,CAAC,KAAKC,SAAS,IAAID,CAAC,KAAK,IAAI;AACtC;AAEA,MAAME,KAAK,GAAGA,CAACF,CAAC,EAAEG,CAAC,KAAKH,CAAC;AAGzB,MAAMI,uBAAuB,GAAG;EAC9BC,SAAS,EAAE,IAAI;EACfC,UAAU,EAAE,IAAI;EAChBC,MAAM,EAAE;AACV,CAAC;AAGc,MAAMC,sBAAsB,CAAC;EAW1CC,WAAWA,CAACC,IAAI,EAAEC,MAAM,EAAEC,YAAY,EAAgB;IAAA,IAAAC,UAAA;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAd,SAAA,GAAAc,SAAA,MAAG,CAAC,CAAC;IAAA,IAAAE,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAClD,IAAAC,mBAAM,EAACP,YAAY,IAAI,CAAC,CAAC;IACzB,IAAI,CAACF,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAEhC,IAAI,CAACQ,WAAW,GAAG,EAAAP,UAAA,OAAI,CAACH,IAAI,cAAAG,UAAA,uBAATA,UAAA,CAAWP,UAAU,KAAI,CAAC,CAAC;IAG9C,IAAI,CAACe,WAAW,GAAG,CAAC,CAAC;IACrB,KAAK,MAAMC,YAAY,IAAI,IAAI,CAACZ,IAAI,EAAE;MACpC,IAAI,CAACN,uBAAuB,CAACkB,YAAY,CAAC,EAAE;QAC1C,IAAI,CAACD,WAAW,CAACC,YAAY,CAAC,GAAG,IAAI,CAACZ,IAAI,CAACY,YAAY,CAAC;MAC1D;IACF;IAEA,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACC,2BAA2B,CAAC,CAAC;IAG3D,IAAIV,OAAO,CAAC,+BAA+B,CAAC,EAAE;MAC5C,IAAI,CAACW,UAAU,GAAG,IAAAC,8CAAmB,EAAC,IAAI,EAAE,IAAI,CAAChB,IAAI,EAAE,IAAI,CAACC,MAAM,CAAC;IACrE;EACF;EAEAgB,YAAYA,CAACC,aAAa,EAAE;IAC1B,OAAO,IAAI,CAAClB,IAAI,IAAI,IAAI,CAACA,IAAI,CAACJ,UAAU,IAAI,IAAI,CAACI,IAAI,CAACJ,UAAU,CAACsB,aAAa,CAAC;EACjF;EAEAC,iBAAiBA,CAAA,EAAW;IAC1B,OAAO,CAAC;EACV;EAEAC,OAAOA,CAACC,OAAO,EAAEC,SAAiB,EAAW;IAC3C,IAAI,CAACC,aAAa,CAACF,OAAO,CAAC;IAC3B,IAAAZ,mBAAM,EAAC,OAAOa,SAAS,KAAK,QAAQ,EAAEA,SAAS,CAAC;IAGhD,IAAI,IAAI,CAACP,UAAU,EAAE;MAInB,MAAMS,MAAM,GAAG,IAAAC,4CAAiB,EAAC,IAAI,CAACV,UAAU,EAAEM,OAAO,EAAE,CAACK,SAAS,EAAEC,aAAa,KAAK;QACvF,MAAMC,OAAO,GAAGF,SAAS,CAACG,QAAQ,CAACF,aAAa,CAAC;QACjD,MAAMG,aAAa,GAAGJ,SAAS,CAACK,OAAO,CAACH,OAAO,CAAC;QAChD,OAAOE,aAAa,CAACE,IAAI,KAAKV,SAAS;MACzC,CAAC,CAAC;MACF,OAAOjC,OAAO,CAACmC,MAAM,CAAC;IACxB;IAEA,OAAO,KAAK;EACd;EAEAS,YAAYA,CAACZ,OAAO,EAAEC,SAAS,EAAE;IAC/B,IAAAb,mBAAM,EAAC,OAAOa,SAAS,KAAK,QAAQ,EAAEA,SAAS,CAAC;IAEhD,OAAO,IAAI,CAACY,iBAAiB,CAACb,OAAO,CAAC,KAAKC,SAAS;EACtD;EAEAY,iBAAiBA,CAACb,OAAO,EAAE;IACzB,IAAI,CAACE,aAAa,CAACF,OAAO,CAAC;IAG3B,IAAI,IAAI,CAACN,UAAU,EAAE;MACnB,MAAMa,OAAO,GAAG,IAAI,CAACb,UAAU,CAACc,QAAQ,CAACR,OAAO,CAAC;MACjD,MAAMS,aAAa,GAAG,IAAI,CAACf,UAAU,CAACgB,OAAO,CAACH,OAAO,CAAC;MACtD,OAAOE,aAAa,CAACE,IAAI;IAC3B;IAEA,OAAOzC,SAAS;EAClB;EAEA4C,WAAWA,CAACd,OAAO,EAAEW,IAAI,EAAE;IACzB,IAAI,CAACT,aAAa,CAACF,OAAO,CAAC;IAC3B,IAAAZ,mBAAM,EAAC,OAAOuB,IAAI,KAAK,QAAQ,EAAEA,IAAI,CAAC;IAEtC,OAAO3C,OAAO,CAAC,IAAI,CAACsB,WAAW,CAACqB,IAAI,CAAC,CAAC,IAAI,IAAI,CAACI,uBAAuB,CAACf,OAAO,EAAEW,IAAI,CAAC;EACvF;EAEAK,gBAAgBA,CAAChB,OAAO,EAAEiB,OAAO,EAAE;IACjC,IAAI,CAACf,aAAa,CAACF,OAAO,CAAC;IAE3BiB,OAAO,GAAGjD,OAAO,CAACiD,OAAO,CAAC,GAAGA,OAAO,GAAG,EAAE;IACzCA,OAAO,CAAChC,MAAM,GAAG,CAAC;IAElB,MAAMiC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC9B,WAAW,CAAC;IACnD2B,OAAO,CAACI,IAAI,CAAC,GAAGH,aAAa,CAAC;IAE9B,IAAI,IAAI,CAACxB,UAAU,EAAE;MACnB,IAAI,CAAC4B,4BAA4B,CAACtB,OAAO,EAAEiB,OAAO,CAAC;IACrD;IAEA,OAAOA,OAAO;EAChB;EAEAM,WAAWA,CAACvB,OAAO,EAAEW,IAAI,EAAE;IACzB,IAAI,CAACT,aAAa,CAACF,OAAO,CAAC;IAC3B,IAAAZ,mBAAM,EAAC,OAAOuB,IAAI,KAAK,QAAQ,EAAEA,IAAI,CAAC;IAEtC,IAAI,IAAI,CAACnB,iBAAiB,EAAE;MAC1B,MAAMgC,cAAc,GAAG,IAAI,CAAChC,iBAAiB,CAACmB,IAAI,CAAC;MACnD,IAAI3C,OAAO,CAACwD,cAAc,CAAC,EAAE;QAC3B,OAAO,IAAI,CAACC,kBAAkB,CAACD,cAAc,EAAExB,OAAO,CAAC;MACzD;IACF;IAEA,MAAM0B,cAAc,GAAG,IAAI,CAACpC,WAAW,CAACqB,IAAI,CAAC;IAC7C,IAAI3C,OAAO,CAAC0D,cAAc,CAAC,EAAE;MAC3B,OAAOvD,KAAK,CAACuD,cAAc,CAAC1B,OAAO,CAAC,EAAE,IAAI,CAAC;IAC7C;IAGA,IAAI,IAAI,CAACN,UAAU,EAAE;MACnB,MAAMiC,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAAC5B,OAAO,EAAEW,IAAI,CAAC;MACnE,IAAI3C,OAAO,CAAC2D,iBAAiB,CAAC,EAAE;QAC9B,OAAOA,iBAAiB;MAC1B;IACF;IAEA,OAAOzD,SAAS;EAClB;EAEA2D,WAAWA,CAAC7B,OAAO,EAAEW,IAAI,EAAEmB,KAAK,EAAE;IAChC,MAAMjD,YAAY,GAAG,IAAI,CAACA,YAAY;IAEtC,IAAI,CAACqB,aAAa,CAACF,OAAO,CAAC;IAC3B,IAAAZ,mBAAM,EAAC,OAAOuB,IAAI,KAAK,QAAQ,EAAEA,IAAI,CAAC;IAEtC,IAAI,IAAI,CAACnB,iBAAiB,EAAE;MAC1B,MAAMgC,cAAc,GAAG,IAAI,CAAChC,iBAAiB,CAACmB,IAAI,CAAC;MACnD,IAAIa,cAAc,EAAE;QAClB,IAAI,CAACO,kBAAkB,CAACP,cAAc,EAAExB,OAAO,EAAE8B,KAAK,CAAC;QACvD;MACF;IACF;IAGA,IAAI,IAAI,CAACpC,UAAU,EAAE;MACnB,IAAI,IAAI,CAACsC,qBAAqB,CAAC,IAAI,EAAEhC,OAAO,EAAEW,IAAI,EAAEmB,KAAK,CAAC,EAAE;QAC1D;MACF;IACF;IAEA,IAAIJ,cAAc,GAAG,IAAI,CAACpC,WAAW,CAACqB,IAAI,CAAC;IAC3C,IAAI,CAAC3C,OAAO,CAAC0D,cAAc,CAAC,EAAE;MAE5B,IAAI,CAACpC,WAAW,CAACqB,IAAI,CAAC,GAAG,IAAIsB,KAAK,CAACpD,YAAY,CAAC;MAChD6C,cAAc,GAAG,IAAI,CAACpC,WAAW,CAACqB,IAAI,CAAC;IACzC;IAEAe,cAAc,CAAC1B,OAAO,CAAC,GAAG7B,KAAK,CAAC2D,KAAK,EAAE,IAAI,CAAC;EAC9C;EAIA5B,aAAaA,CAACF,OAAO,EAAE;IACrB,MAAMkC,KAAK,GAAGlC,OAAO,IAAI,CAAC,IAAIA,OAAO,GAAG,IAAI,CAACnB,YAAY;IACzD,IAAI,CAACqD,KAAK,EAAE;MACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;IAChE;EACF;EAEAV,kBAAkBA,CAACD,cAAc,EAAEY,KAAK,EAAE;IACxC,OAAOZ,cAAc,CAACa,MAAM,CAACb,cAAc,CAACc,UAAU,EAAEF,KAAK,CAAC;EAChE;EAEAL,kBAAkBA,CAACP,cAAc,EAAEY,KAAK,EAAEN,KAAK,EAAE;IAC/CN,cAAc,CAACe,IAAI,CAACT,KAAK,EAAEN,cAAc,CAACc,UAAU,EAAEF,KAAK,CAAC;EAC9D;EAEA3C,2BAA2BA,CAAA,EAAG;IAC5B,IAAI+C,gBAA4C,GAAG,IAAI;IACvD,KAAK,MAAM7B,IAAI,IAAI,IAAI,CAACrB,WAAW,EAAE;MACnC,MAAMmD,QAAQ,GAAG,IAAI,CAACnD,WAAW,CAACqB,IAAI,CAAC;MACvC,MAAMa,cAAc,GAAG,IAAI,CAACkB,yBAAyB,CAAC/B,IAAI,EAAE8B,QAAQ,CAAC;MAGrE,IAAIjB,cAAc,EAAE;QAClBgB,gBAAgB,GAAGA,gBAAgB,IAAI,CAAC,CAAC;QACzCA,gBAAgB,CAAC7B,IAAI,CAAC,GAAGa,cAAc;MACzC;IACF;IACA,OAAOgB,gBAAgB;EACzB;EAEAE,yBAAyBA,CAAC/B,IAAI,EAAE8B,QAAQ,EAAE;IACxC,IAAI,YAAY,IAAIA,QAAQ,EAAE;MAE5B,MAAME,cAAc,GAAGF,QAAQ;MAE/B,IAAArD,mBAAM,EAAC,IAAI,CAACR,MAAM,cAAAgE,MAAA,CAAcjC,IAAI,oCAAiC,CAAC;MACtE,IAAAvB,mBAAM,EAACuD,cAAc,CAACE,IAAI,cAAAD,MAAA,CAAcjC,IAAI,sBAAmB,CAAC;MAEhE,MAAMmC,QAAQ,GAAG,IAAAC,iDAA4B,EAC3CJ,cAAc,EACd,IAAI,CAAC/D,MAAM,CAACoE,MAAM,EAClB,IAAI,CAACpE,MAAM,CAACqE,UAAU,GAAG,CAAC,EAC1B,IAAI,CAACpE,YACP,CAAC;MAID,OAAO;QACLyD,UAAU,EAAEQ,QAAQ,CAACI,MAAM;QAC3BC,cAAc,EAAEL,QAAQ,CAACM,IAAI;QAC7Bf,MAAM,EAAES,QAAQ,CAACO,QAAQ;QACzBd,IAAI,EAAEO,QAAQ,CAACQ;MACjB,CAAC;IACH;IAEA,OAAO,IAAI;EACb;EAIAvC,uBAAuBA,CAACf,OAAO,EAAEW,IAAI,EAAE;IACrC,IAAI,CAAC,IAAI,CAACjB,UAAU,EAAE;MACpB,OAAO,KAAK;IACd;IAEA,MAAMS,MAAM,GAAG,IAAAC,4CAAiB,EAAC,IAAI,CAACV,UAAU,EAAEM,OAAO,EAAE,CAACK,SAAS,EAAEC,aAAa,KAAK;MACvF,MAAMC,OAAO,GAAGF,SAAS,CAACG,QAAQ,CAACF,aAAa,CAAC;MACjD,MAAMiD,SAAS,GAAGlD,SAAS,CAACK,OAAO,CAACH,OAAO,CAAC,CAACgD,SAAS;MACtD,OAAOvF,OAAO,CAACuF,SAAS,CAAC5C,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF,OAAO3C,OAAO,CAACmC,MAAM,CAAC;EACxB;EAEAmB,4BAA4BA,CAACtB,OAAO,EAAEiB,OAAO,EAAE;IAC7C,IAAAb,4CAAiB,EAAC,IAAI,CAACV,UAAU,EAAEM,OAAO,EAAE,CAACK,SAAS,EAAEC,aAAa,KAAK;MACxE,MAAMC,OAAO,GAAGF,SAAS,CAACG,QAAQ,CAACF,aAAa,CAAC;MACjD,MAAMiD,SAAS,GAAGlD,SAAS,CAACK,OAAO,CAACH,OAAO,CAAC,CAACgD,SAAS;MACtD,KAAK,MAAM5C,IAAI,IAAI4C,SAAS,EAAE;QAC5B,IAAIA,SAAS,CAACC,cAAc,CAAC7C,IAAI,CAAC,EAAE;UAClC,IAAIM,OAAO,CAACwC,OAAO,CAAC9C,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YAChCM,OAAO,CAACI,IAAI,CAACV,IAAI,CAAC;UACpB;QACF;MACF;IACF,CAAC,CAAC;EACJ;EAEAiB,qBAAqBA,CAAC5B,OAAO,EAAEW,IAAI,EAAE;IACnC,OAAO,IAAAP,4CAAiB,EAAC,IAAI,CAACV,UAAU,EAAEM,OAAO,EAAE,CAACK,SAAS,EAAEC,aAAa,KAAK;MAC/E,MAAMC,OAAO,GAAGF,SAAS,CAACG,QAAQ,CAACF,aAAa,CAAC;MACjD,MAAMG,aAAa,GAAGJ,SAAS,CAACK,OAAO,CAACH,OAAO,CAAC;MAChD,MAAMmD,YAAY,GAAGrD,SAAS,CAACsD,YAAY,CAACrD,aAAa,CAAC;MAC1D,MAAMoB,cAAc,GAAGjB,aAAa,CAAC8C,SAAS,CAAC5C,IAAI,CAAC;MACpD,IAAI3C,OAAO,CAAC0D,cAAc,CAAC,EAAE;QAC3B,IAAI1D,OAAO,CAAC0D,cAAc,CAACY,UAAU,CAAC,EAAE;UACtC,OAAO,IAAI,CAACb,kBAAkB,CAACC,cAAc,EAAEgC,YAAY,CAAC;QAC9D;QACA,OAAOvF,KAAK,CAACuD,cAAc,CAACgC,YAAY,CAAC,EAAE,IAAI,CAAC;MAClD;MACA,OAAO,IAAI;IACb,CAAC,CAAC;EACJ;EAEA1B,qBAAqBA,CAAC4B,UAAU,EAAE5D,OAAO,EAAEW,IAAI,EAAEmB,KAAK,EAAE;IACtD,MAAM3B,MAAM,GAAG,IAAAC,4CAAiB,EAAC,IAAI,CAACV,UAAU,EAAEM,OAAO,EAAE,CAACK,SAAS,EAAEC,aAAa,KAAK;MACvF,MAAMC,OAAO,GAAGF,SAAS,CAACG,QAAQ,CAACF,aAAa,CAAC;MACjD,MAAMG,aAAa,GAAGJ,SAAS,CAACK,OAAO,CAACH,OAAO,CAAC;MAChD,MAAMmD,YAAY,GAAGrD,SAAS,CAACsD,YAAY,CAACrD,aAAa,CAAC;MAC1D,MAAMoB,cAAc,GAAGjB,aAAa,CAAC8C,SAAS,CAAC5C,IAAI,CAAC;MACpD,IAAI3C,OAAO,CAAC0D,cAAc,CAAC,EAAE;QAC3B,IAAAtC,mBAAM,EAACkB,aAAa,KAAKN,OAAO,0BAAA4C,MAAA,CAAyBjC,IAAI,qBAAiB,CAAC;QAC/E,IAAI3C,OAAO,CAAC0D,cAAc,CAACY,UAAU,CAAC,EAAE;UACtC,IAAI,CAACP,kBAAkB,CAACL,cAAc,EAAEgC,YAAY,EAAE5B,KAAK,CAAC;QAC9D,CAAC,MAAM;UACLJ,cAAc,CAACgC,YAAY,CAAC,GAAGvF,KAAK,CAAC2D,KAAK,EAAE,IAAI,CAAC;QACnD;QACA,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IACF,OAAO9D,OAAO,CAACmC,MAAM,CAAC;EACxB;AACF;AAAC0D,OAAA,CAAA1E,OAAA,GAAAV,sBAAA"}