{"version":3,"file":"parse-3d-tile.js","names":["_constants","require","_parseUtils","_parse3dTilePointCloud","_parse3dTileBatchedModel","_parse3dTileInstancedModel","_parse3dTileComposite","_parse3dTileGltf","parse3DTile","arrayBuffer","byteOffset","arguments","length","undefined","options","context","tile","type","getMagicString","TILE3D_TYPE","COMPOSITE","parseComposite3DTile","BATCHED_3D_MODEL","parseBatchedModel3DTile","GLTF","parseGltf3DTile","INSTANCED_3D_MODEL","parseInstancedModel3DTile","POINT_CLOUD","parsePointCloud3DTile","Error","concat"],"sources":["../../../../src/lib/parsers/parse-3d-tile.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {getMagicString} from './helpers/parse-utils';\n\nimport {parsePointCloud3DTile} from './parse-3d-tile-point-cloud';\nimport {parseBatchedModel3DTile} from './parse-3d-tile-batched-model';\nimport {parseInstancedModel3DTile} from './parse-3d-tile-instanced-model';\nimport {parseComposite3DTile} from './parse-3d-tile-composite';\nimport {parseGltf3DTile} from './parse-3d-tile-gltf';\n\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  // @ts-expect-error\n  tile.byteOffset = byteOffset;\n  // @ts-expect-error\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  // @ts-expect-error\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTile\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.GLTF:\n      return await parseGltf3DTile(tile, arrayBuffer, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      // @ts-expect-error\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n"],"mappings":";;;;;;AAGA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AAEA,IAAAE,sBAAA,GAAAF,OAAA;AACA,IAAAG,wBAAA,GAAAH,OAAA;AACA,IAAAI,0BAAA,GAAAJ,OAAA;AACA,IAAAK,qBAAA,GAAAL,OAAA;AACA,IAAAM,gBAAA,GAAAN,OAAA;AAGO,eAAeO,WAAWA,CAACC,WAAW,EAA+C;EAAA,IAA7CC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEG,OAAO,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEE,OAAO,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEG,IAAI,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAExFK,IAAI,CAACN,UAAU,GAAGA,UAAU;EAE5BM,IAAI,CAACC,IAAI,GAAG,IAAAC,0BAAc,EAACT,WAAW,EAAEC,UAAU,CAAC;EAGnD,QAAQM,IAAI,CAACC,IAAI;IACf,KAAKE,sBAAW,CAACC,SAAS;MAExB,OAAO,MAAM,IAAAC,0CAAoB,EAC/BL,IAAI,EACJP,WAAW,EACXC,UAAU,EACVI,OAAO,EACPC,OAAO,EACPP,WACF,CAAC;IAEH,KAAKW,sBAAW,CAACG,gBAAgB;MAC/B,OAAO,MAAM,IAAAC,gDAAuB,EAACP,IAAI,EAAEP,WAAW,EAAEC,UAAU,EAAEI,OAAO,EAAEC,OAAO,CAAC;IAEvF,KAAKI,sBAAW,CAACK,IAAI;MACnB,OAAO,MAAM,IAAAC,gCAAe,EAACT,IAAI,EAAEP,WAAW,EAAEK,OAAO,EAAEC,OAAO,CAAC;IAEnE,KAAKI,sBAAW,CAACO,kBAAkB;MACjC,OAAO,MAAM,IAAAC,oDAAyB,EAACX,IAAI,EAAEP,WAAW,EAAEC,UAAU,EAAEI,OAAO,EAAEC,OAAO,CAAC;IAEzF,KAAKI,sBAAW,CAACS,WAAW;MAC1B,OAAO,MAAM,IAAAC,4CAAqB,EAACb,IAAI,EAAEP,WAAW,EAAEC,UAAU,EAAEI,OAAO,EAAEC,OAAO,CAAC;IAErF;MAEE,MAAM,IAAIe,KAAK,+BAAAC,MAAA,CAA+Bf,IAAI,CAACC,IAAI,CAAE,CAAC;EAC9D;AACF"}