{"version":3,"file":"i3s-tileset-traverser.js","names":["_core","require","_tilesetTraverser","_i3sLod","_tile3d","_i3sTileManager","I3STilesetTraverser","TilesetTraverser","constructor","options","_defineProperty2","default","_tileManager","I3STileManager","traversalFinished","frameState","hasPendingTiles","viewport","id","_frameNumber","shouldRefine","tile","_lodJudge","getLodStatus","updateChildTiles","children","header","childTiles","tileset","child","extendedId","concat","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","loadOptions","i3s","isTileHeader","load","Tile3D","push","frameNumber","Date","getTime","lastUpdate","updateDebounceTime","executeTraversal","exports"],"sources":["../../../../src/tileset/format-i3s/i3s-tileset-traverser.ts"],"sourcesContent":["import {load} from '@loaders.gl/core';\nimport {TilesetTraverser} from '../tileset-traverser';\n\nimport {getLodStatus} from '../helpers/i3s-lod';\nimport {Tile3D} from '../tile-3d';\nimport {I3STileManager} from './i3s-tile-manager';\nimport {FrameState} from '../helpers/frame-state';\n\nexport class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  /**\n   * Check if there are no penging tile header requests,\n   * that means the traversal is finished and we can call\n   * following-up callbacks.\n   */\n  traversalFinished(frameState: FrameState): boolean {\n    return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);\n  }\n\n  shouldRefine(tile, frameState: FrameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState: FrameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init Tile3D instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {Tile3D} tile - the parent Tile3D instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new Tile3D(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (\n      this._frameNumber === frameState.frameNumber &&\n      (this.traversalFinished(frameState) ||\n        new Date().getTime() - this.lastUpdate > this.updateDebounceTime)\n    ) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"mappings":"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"}