"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._typecheckLERCLoader = exports.LERCLoader = void 0;
var Lerc = _interopRequireWildcard(require("lerc"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const VERSION = typeof "3.4.15" !== 'undefined' ? "3.4.15" : 'latest';
const LERCLoader = {
  id: 'lerc',
  name: 'LERC',
  module: 'wms',
  version: VERSION,
  worker: false,
  extensions: ['lrc', 'lerc', 'lerc2', 'lerc1'],
  mimeTypes: ['application/octet-stream'],
  options: {
    wms: {}
  },
  parse: async (arrayBuffer, options) => parseLERC(arrayBuffer, options)
};
exports.LERCLoader = LERCLoader;
async function parseLERC(arrayBuffer, options) {
  await Lerc.load();
  const pixelBlock = Lerc.decode(arrayBuffer, options === null || options === void 0 ? void 0 : options.lerc);
  return pixelBlock;
}
const _typecheckLERCLoader = LERCLoader;
exports._typecheckLERCLoader = _typecheckLERCLoader;
//# sourceMappingURL=lerc-loader.js.map