{"version":3,"file":"wms-service.js","names":["_images","require","_loaderUtils","_imageSource","_wmsCapabilitiesLoader","_wmsFeatureInfoLoader","_wmsLayerDescriptionLoader","_wmsErrorLoader","WMSService","ImageSource","constructor","props","_props$substituteCRS","_defineProperty2","default","url","substituteCRS84","flipCRS","wmsParameters","layers","undefined","query_layers","styles","version","crs","format","info_format","transparent","time","elevation","vendorParameters","getMetadata","capabilities","getCapabilities","normalizeMetadata","getImage","parameters","getMap","getCapabilitiesURL","response","fetch","arrayBuffer","_checkResponse","WMSCapabilitiesLoader","parse","loadOptions","getMapURL","ImageLoader","_parseError","getFeatureInfo","getFeatureInfoURL","WMSFeatureInfoLoader","getFeatureInfoText","TextDecoder","decode","describeLayer","describeLayerURL","WMSLayerDescriptionLoader","getLegendGraphic","getLegendGraphicURL","options","_getWMSUrl","_getWMS130Parameters","_parseWMSUrl","baseUrl","search","split","searchParams","parameter","key","value","request","first","allParameters","service","IGNORE_EMPTY_KEYS","Object","entries","includes","_getURLParameter","encodeURI","newParameters","srs","bbox","_flipBoundingBox","toUpperCase","Array","isArray","concat","join","String","bboxValue","length","flipCoordinates","_fetchArrayBuffer","contentType","headers","ok","WMSErrorLoader","mimeTypes","mergeLoaderOptions","wms","throwOnError","error","parseSync","Error","exports","toLowerCase"],"sources":["../../../../../src/lib/services/ogc/wms-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/* eslint-disable camelcase */\nimport type {ImageType} from '@loaders.gl/images';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {mergeLoaderOptions} from '@loaders.gl/loader-utils';\n\nimport type {ImageSourceMetadata, GetImageParameters} from '../../sources/image-source';\nimport type {ImageSourceProps} from '../../sources/image-source';\nimport {ImageSource} from '../../sources/image-source';\n\nimport type {WMSCapabilities} from '../../../wms-capabilities-loader';\nimport type {WMSFeatureInfo} from '../../../wip/wms-feature-info-loader';\nimport type {WMSLayerDescription} from '../../../wip/wms-layer-description-loader';\n\nimport {WMSCapabilitiesLoader} from '../../../wms-capabilities-loader';\nimport {WMSFeatureInfoLoader} from '../../../wip/wms-feature-info-loader';\nimport {WMSLayerDescriptionLoader} from '../../../wip/wms-layer-description-loader';\n\nimport type {WMSLoaderOptions} from '../../../wms-error-loader';\nimport {WMSErrorLoader} from '../../../wms-error-loader';\n\n/**\n * \"Static\" WMS parameters (not viewport or selected pixel dependent)\n * These can be provided as defaults in the WMSService constructor\n */\nexport type WMSParameters = {\n  /** WMS version (all requests) */\n  version?: '1.3.0' | '1.1.1';\n  /** Layers to render (GetMap, GetFeatureInfo) */\n  layers?: string[];\n  /** list of layers to query.. (GetFeatureInfo) */\n  query_layers?: string[];\n\n  /** Coordinate Reference System (CRS) for the image (not the bounding box) */\n  crs?: string;\n  /** Requested format for the return image (GetMap, GetLegendGraphic) */\n  format?: 'image/png';\n  /** Requested MIME type of returned feature info (GetFeatureInfo) */\n  info_format?: 'text/plain' | 'application/geojson' | 'application/vnd.ogc.gml';\n  /** Styling - Not yet supported */\n  styles?: unknown;\n  /** Any additional parameters specific to this WMSService (GetMap) */\n  transparent?: boolean;\n  /** If layer supports time dimension */\n  time?: string;\n  /** If layer supports elevation dimension */\n  elevation?: string;\n};\n\n/** Parameters for GetCapabilities */\nexport type WMSGetCapabilitiesParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n};\n\n/** Parameters for GetMap */\nexport type WMSGetMapParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** requested format for the return image. can be provided in service constructor */\n  format?: 'image/png';\n  /** Layers to render - can be provided in service constructor */\n  layers?: string | string[];\n  /** Coordinate Reference System for the image (not bounding box). can be provided in service constructor. */\n  crs?: string;\n  /** Styling. can be provided in service constructor */\n  styles?: unknown;\n  /** Don't render background when no data. can be provided in service constructor */\n  transparent?: boolean;\n  /** If layer supports time dimension */\n  time?: string;\n  /** If layer supports elevation dimension */\n  elevation?: string;\n};\n\n/** GetMap parameters that are specific to the current view */\nexport type WMSGetMapViewParameters = {\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** Coordinate Reference System for the image (not bounding box). can be provided in service constructor. */\n  crs?: string;\n};\n\n/**\n * Parameters for GetFeatureInfo\n * @see https://imagery.pasda.psu.edu/arcgis/services/pasda/UrbanTreeCanopy_Landcover/MapServer/WmsServer?SERVICE=WMS&\n */\nexport type WMSGetFeatureInfoParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n  /** x coordinate for the feature info request */\n  x: number;\n  /** y coordinate for the feature info request */\n  y: number;\n  /** MIME type of returned feature info. Can be specified in service constructor */\n  info_format?: 'text/plain' | 'application/geojson' | 'application/vnd.ogc.gml';\n  /** list of layers to query. Required but can be specified in service constructor. */\n  query_layers?: string[];\n  /** Layers to render. Required, but can be specified in service constructor */\n  layers?: string[];\n  /** Styling */\n  styles?: unknown;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** srs for the image (not the bounding box) */\n  crs?: string;\n};\n\n/** GetMap parameters that are specific to the current view */\nexport type WMSGetFeatureInfoViewParameters = {\n  /** x coordinate for the feature info request */\n  x: number;\n  /** y coordinate for the feature info request */\n  y: number;\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** srs for the image (not the bounding box) */\n  crs?: string;\n};\n\n/** Parameters for DescribeLayer */\nexport type WMSDescribeLayerParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n};\n\n/** Parameters for GetLegendGraphic */\nexport type WMSGetLegendGraphicParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n};\n\n//\n\n/** Properties for creating a enw WMS service */\nexport type WMSServiceProps = ImageSourceProps & {\n  /** Base URL to the service */\n  url: string;\n  /** In 1.3.0, replaces references to EPSG:4326 with CRS:84 */\n  substituteCRS84?: boolean;\n\n  /** Default WMS parameters. If not provided here, must be provided in the various request */\n  wmsParameters?: WMSParameters;\n  /** Any additional service specific parameters */\n  vendorParameters?: Record<string, unknown>;\n};\n\n/**\n * The WMSService class provides\n * - provides type safe methods to form URLs to a WMS service\n * - provides type safe methods to query and parse results (and errors) from a WMS service\n * - implements the ImageService interface\n * @note Only the URL parameter conversion is supported. XML posts are not supported.\n */\nexport class WMSService extends ImageSource<WMSServiceProps> {\n  static type: 'wms' = 'wms';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('wms');\n\n  /** Base URL to the service */\n  readonly url: string;\n\n  /** In WMS 1.3.0, replaces references to EPSG:4326 with CRS:84. But not always supported. Default: false */\n  substituteCRS84: boolean;\n  /** In WMS 1.3.0, flips x,y (lng, lat) coordinates for the supplied coordinate systems. Default: ['ESPG:4326'] */\n  flipCRS: string[];\n\n  /** Default static WMS parameters */\n  wmsParameters: Required<WMSParameters>;\n  /** Default static vendor parameters */\n  vendorParameters?: Record<string, unknown>;\n\n  capabilities: WMSCapabilities | null = null;\n\n  /** Create a WMSService */\n  constructor(props: WMSServiceProps) {\n    super(props);\n\n    // TODO - defaults such as version, layers etc could be extracted from a base URL with parameters\n    // This would make pasting in any WMS URL more likely to make this class just work.\n    // const {baseUrl, parameters} = this._parseWMSUrl(props.url);\n\n    this.url = props.url;\n\n    this.substituteCRS84 = props.substituteCRS84 ?? false;\n    this.flipCRS = ['EPSG:4326'];\n\n    this.wmsParameters = {\n      layers: undefined!,\n      query_layers: undefined!,\n      styles: undefined,\n      version: '1.3.0',\n      crs: 'EPSG:4326',\n      format: 'image/png',\n      info_format: 'text/plain',\n      transparent: undefined!,\n      time: undefined!,\n      elevation: undefined!,\n      ...props.wmsParameters\n    };\n\n    this.vendorParameters = props.vendorParameters || {};\n  }\n\n  // ImageSource implementation\n  async getMetadata(): Promise<ImageSourceMetadata> {\n    const capabilities = await this.getCapabilities();\n    return this.normalizeMetadata(capabilities);\n  }\n\n  async getImage(parameters: GetImageParameters): Promise<ImageType> {\n    return await this.getMap(parameters);\n  }\n\n  normalizeMetadata(capabilities: WMSCapabilities): ImageSourceMetadata {\n    return capabilities;\n  }\n\n  // WMS Service API Stubs\n\n  /** Get Capabilities */\n  async getCapabilities(\n    wmsParameters?: WMSGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSCapabilities> {\n    const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    const capabilities = await WMSCapabilitiesLoader.parse(arrayBuffer, this.loadOptions);\n    this.capabilities = capabilities;\n    return capabilities;\n  }\n\n  /** Get a map image */\n  async getMap(\n    wmsParameters: WMSGetMapParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<ImageType> {\n    const url = this.getMapURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    try {\n      return await ImageLoader.parse(arrayBuffer, this.loadOptions);\n    } catch {\n      throw this._parseError(arrayBuffer);\n    }\n  }\n\n  /** Get Feature Info for a coordinate */\n  async getFeatureInfo(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSFeatureInfo> {\n    const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await WMSFeatureInfoLoader.parse(arrayBuffer, this.loadOptions);\n  }\n\n  /** Get Feature Info for a coordinate */\n  async getFeatureInfoText(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<string> {\n    const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  /** Get more information about a layer */\n  async describeLayer(\n    wmsParameters: WMSDescribeLayerParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSLayerDescription> {\n    const url = this.describeLayerURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await WMSLayerDescriptionLoader.parse(arrayBuffer, this.loadOptions);\n  }\n\n  /** Get an image with a semantic legend */\n  async getLegendGraphic(\n    wmsParameters: WMSGetLegendGraphicParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<ImageType> {\n    const url = this.getLegendGraphicURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    try {\n      return await ImageLoader.parse(arrayBuffer, this.loadOptions);\n    } catch {\n      throw this._parseError(arrayBuffer);\n    }\n  }\n\n  // Typed URL creators\n  // For applications that want full control of fetching and parsing\n\n  /** Generate a URL for the GetCapabilities request */\n  getCapabilitiesURL(\n    wmsParameters?: WMSGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetCapabilitiesParameters> = {\n      version: this.wmsParameters.version,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetCapabilities', options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetMap request */\n  getMapURL(\n    wmsParameters: WMSGetMapParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    wmsParameters = this._getWMS130Parameters(wmsParameters);\n    const options: Required<WMSGetMapParameters> = {\n      version: this.wmsParameters.version,\n      format: this.wmsParameters.format,\n      transparent: this.wmsParameters.transparent,\n      time: this.wmsParameters.time,\n      elevation: this.wmsParameters.elevation,\n      layers: this.wmsParameters.layers,\n      styles: this.wmsParameters.styles,\n      crs: this.wmsParameters.crs,\n      // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n      // width: 1200,\n      // height: 900,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetMap', options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetFeatureInfo request */\n  getFeatureInfoURL(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetFeatureInfoParameters> = {\n      version: this.wmsParameters.version,\n      // query_layers: [],\n      // format: this.wmsParameters.format,\n      info_format: this.wmsParameters.info_format,\n      layers: this.wmsParameters.layers,\n      query_layers: this.wmsParameters.query_layers,\n      styles: this.wmsParameters.styles,\n      crs: this.wmsParameters.crs,\n      // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n      // width: 1200,\n      // height: 900,\n      // x: undefined!,\n      // y: undefined!,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetFeatureInfo', options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetFeatureInfo request */\n  describeLayerURL(\n    wmsParameters: WMSDescribeLayerParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSDescribeLayerParameters> = {\n      version: this.wmsParameters.version,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('DescribeLayer', options, vendorParameters);\n  }\n\n  getLegendGraphicURL(\n    wmsParameters: WMSGetLegendGraphicParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetLegendGraphicParameters> = {\n      version: this.wmsParameters.version,\n      // format?\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetLegendGraphic', options, vendorParameters);\n  }\n\n  // INTERNAL METHODS\n\n  _parseWMSUrl(url: string): {url: string; parameters: Record<string, unknown>} {\n    const [baseUrl, search] = url.split('?');\n    const searchParams = search.split('&');\n\n    const parameters: Record<string, unknown> = {};\n    for (const parameter of searchParams) {\n      const [key, value] = parameter.split('=');\n      parameters[key] = value;\n    }\n\n    return {url: baseUrl, parameters};\n  }\n\n  /**\n   * Generate a URL with parameters\n   * @note case _getWMSUrl may need to be overridden to handle certain backends?\n   * @note at the moment, only URLs with parameters are supported (no XML payloads)\n   * */\n  protected _getWMSUrl(\n    request: string,\n    wmsParameters: {version?: '1.3.0' | '1.1.1'; [key: string]: unknown},\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    let url = this.url;\n    let first = true;\n\n    // Add any vendor searchParams\n    const allParameters = {\n      service: 'WMS',\n      version: wmsParameters.version,\n      request,\n      ...wmsParameters,\n      ...this.vendorParameters,\n      ...vendorParameters\n    };\n\n    // Encode the keys\n    const IGNORE_EMPTY_KEYS = ['transparent', 'time', 'elevation'];\n    for (const [key, value] of Object.entries(allParameters)) {\n      // hack to preserve test cases. Not super clear if keys should be included when values are undefined\n      if (!IGNORE_EMPTY_KEYS.includes(key) || value) {\n        url += first ? '?' : '&';\n        first = false;\n        url += this._getURLParameter(key, value, wmsParameters);\n      }\n    }\n\n    return encodeURI(url);\n  }\n\n  _getWMS130Parameters<ParametersT extends {crs?: string; srs?: string}>(\n    wmsParameters: ParametersT\n  ): ParametersT {\n    const newParameters = {...wmsParameters};\n    if (newParameters.srs) {\n      newParameters.crs = newParameters.crs || newParameters.srs;\n      delete newParameters.srs;\n    }\n    return newParameters;\n  }\n\n  // eslint-disable-complexity\n  _getURLParameter(key: string, value: unknown, wmsParameters: WMSParameters): string {\n    // Substitute by key\n    switch (key) {\n      case 'crs':\n        // CRS was called SRS before WMS 1.3.0\n        if (wmsParameters.version !== '1.3.0') {\n          key = 'srs';\n        } else if (this.substituteCRS84 && value === 'EPSG:4326') {\n          /** In 1.3.0, replaces references to 'EPSG:4326' with the new backwards compatible CRS:84 */\n          // Substitute by value\n          value = 'CRS:84';\n        }\n        break;\n\n      case 'srs':\n        // CRS was called SRS before WMS 1.3.0\n        if (wmsParameters.version === '1.3.0') {\n          key = 'crs';\n        }\n        break;\n\n      case 'bbox':\n        // Coordinate order is flipped for certain CRS in WMS 1.3.0\n        const bbox = this._flipBoundingBox(value, wmsParameters);\n        if (bbox) {\n          value = bbox;\n        }\n        break;\n\n      default:\n      // do nothing\n    }\n\n    key = key.toUpperCase();\n\n    return Array.isArray(value)\n      ? `${key}=${value.join(',')}`\n      : `${key}=${value ? String(value) : ''}`;\n  }\n\n  /** Coordinate order is flipped for certain CRS in WMS 1.3.0 */\n  _flipBoundingBox(\n    bboxValue: unknown,\n    wmsParameters: WMSParameters\n  ): [number, number, number, number] | null {\n    // Sanity checks\n    if (!Array.isArray(bboxValue) || bboxValue.length !== 4) {\n      return null;\n    }\n\n    const flipCoordinates =\n      // Only affects WMS 1.3.0\n      wmsParameters.version === '1.3.0' &&\n      // Flip if we are dealing with a CRS that was flipped in 1.3.0\n      this.flipCRS.includes(wmsParameters.crs || '') &&\n      // Don't flip if we are subsituting EPSG:4326 with CRS:84\n      !(this.substituteCRS84 && wmsParameters.crs === 'EPSG:4326');\n\n    const bbox = bboxValue as [number, number, number, number];\n    return flipCoordinates ? [bbox[1], bbox[0], bbox[3], bbox[2]] : bbox;\n  }\n\n  /** Fetches an array buffer and checks the response (boilerplate reduction) */\n  protected async _fetchArrayBuffer(url: string): Promise<ArrayBuffer> {\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return arrayBuffer;\n  }\n\n  /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */\n  protected _checkResponse(response: Response, arrayBuffer: ArrayBuffer): void {\n    const contentType = response.headers['content-type'];\n    if (!response.ok || WMSErrorLoader.mimeTypes.includes(contentType)) {\n      // We want error responses to throw exceptions, the WMSErrorLoader can do this\n      const loadOptions = mergeLoaderOptions<WMSLoaderOptions>(this.loadOptions, {\n        wms: {throwOnError: true}\n      });\n      const error = WMSErrorLoader.parseSync(arrayBuffer, loadOptions);\n      throw new Error(error);\n    }\n  }\n\n  /** Error situation detected */\n  protected _parseError(arrayBuffer: ArrayBuffer): Error {\n    const error = WMSErrorLoader.parseSync(arrayBuffer, this.loadOptions);\n    return new Error(error);\n  }\n}\n"],"mappings":"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"}