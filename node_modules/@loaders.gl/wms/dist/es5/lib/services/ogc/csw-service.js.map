{"version":3,"file":"csw-service.js","names":["_dataSource","require","_cswCapabilitiesLoader","_cswRecordsLoader","_cswDomainLoader","_wmsErrorLoader","CSWService","DataSource","constructor","props","_defineProperty2","default","CSWErrorLoader","CSWCapabilitiesLoader","getMetadata","capabilities","getCapabilities","normalizeMetadata","getServiceDirectory","options","services","unknownServices","records","getRecords","record","reference","references","url","value","scheme","push","name","title","type","_parseOGCUrl","includeUnknown","concat","parts","split","params","wmsParameters","vendorParameters","getCapabilitiesURL","response","fetch","arrayBuffer","_checkResponse","parse","loadOptions","getRecordsURL","CSWRecordsLoader","getDomain","getDomainURL","CSWDomainLoader","version","service","request","_getCSWUrl","typenames","first","key","Object","entries","Array","isArray","toUpperCase","join","String","encodeURI","contentType","headers","ok","mimeTypes","includes","error","parseSync","Error","_parseError","exports","toLowerCase"],"sources":["../../../../../src/lib/services/ogc/csw-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/* eslint-disable camelcase */\n\nimport type {DataSourceProps} from '../../sources/data-source';\nimport {DataSource} from '../../sources/data-source';\n\nimport type {CSWCapabilities} from '../../../csw-capabilities-loader';\nimport {CSWCapabilitiesLoader} from '../../../csw-capabilities-loader';\n\nimport type {CSWRecords} from '../../../csw-records-loader';\nimport {CSWRecordsLoader} from '../../../csw-records-loader';\n\nimport type {CSWDomain} from '../../../csw-domain-loader';\nimport {CSWDomainLoader} from '../../../csw-domain-loader';\n\nimport {WMSErrorLoader as CSWErrorLoader} from '../../../wms-error-loader';\n\ntype CSWCommonParameters = {\n  /** In case the endpoint supports multiple services */\n  service?: 'CSW';\n  /** In case the endpoint supports multiple CSW versions */\n  version?: '1.1.1' | '2.0.0' | '2.0.1' | '3.0.0';\n};\n\nexport type CSWGetCapabilitiesParameters = CSWCommonParameters & {\n  /** Request type */\n  request?: 'GetCapabilities';\n};\n\nexport type CSWGetRecordsParameters = CSWCommonParameters & {\n  /** Request type */\n  request?: 'GetRecords';\n  /** type of records */\n  typenames: 'csw:Record';\n};\n\nexport type CSWGetDomainParameters = CSWCommonParameters & {\n  /** Request type */\n  request?: 'GetDomain';\n  // TBA\n};\n\n/** Describes a service or resource exposed by the catalog */\nexport type Service = {\n  /** name of service or resource */\n  name: string;\n  /** type of service or resource */\n  type: string;\n  url: string;\n  params?: string;\n  scheme?: string;\n};\n\nexport type CSWServiceProps = DataSourceProps & {\n  url: string;\n};\n\n/**\n * The CSWService class\n * - provides type safe methods to form URLs to a CSW service\n * - provides type safe methods to query and parse results (and errors) from a CSW service\n * @note Only the URL parameter conversion is supported. XML posts are not supported.\n */\nexport class CSWService extends DataSource<CSWServiceProps> {\n  static type: 'csw' = 'csw';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('csw');\n\n  capabilities: CSWCapabilities | null = null;\n\n  /** A list of loaders used by the CSWService methods */\n  readonly loaders = [CSWErrorLoader, CSWCapabilitiesLoader];\n\n  /** Create a CSWService */\n  constructor(props: CSWServiceProps) {\n    super(props);\n  }\n\n  async getMetadata(): Promise<CSWCapabilities> {\n    const capabilities = await this.getCapabilities();\n    return this.normalizeMetadata(capabilities);\n  }\n\n  normalizeMetadata(capabilities: CSWCapabilities): CSWCapabilities {\n    return capabilities;\n  }\n\n  async getServiceDirectory(options?: {includeUnknown?: boolean}): Promise<Service[]> {\n    const services: Service[] = [];\n    const unknownServices: Service[] = [];\n\n    const records = await this.getRecords();\n    for (const record of records.records) {\n      for (const reference of record.references) {\n        const url = reference.value;\n        switch (reference.scheme) {\n          case 'OGC:WMS':\n            services.push({name: record.title, type: 'ogc-wms-service', ...this._parseOGCUrl(url)});\n            break;\n          case 'OGC:WMTS':\n            services.push({\n              name: record.title,\n              type: 'ogc-wmts-service',\n              ...this._parseOGCUrl(url)\n            });\n            break;\n          case 'OGC:WFS':\n            services.push({name: record.title, type: 'ogc-wfs-service', ...this._parseOGCUrl(url)});\n            break;\n          default:\n            unknownServices.push({\n              name: record.title,\n              type: 'unknown',\n              url: reference.value,\n              scheme: reference.scheme\n            });\n        }\n      }\n    }\n\n    return options?.includeUnknown ? services.concat(unknownServices) : services;\n  }\n\n  _parseOGCUrl(url: string): {url: string; params: string} {\n    const parts = url.split('?');\n    return {\n      url: parts[0],\n      params: parts[1] || ''\n    };\n  }\n\n  // CSW Service API Stubs\n\n  /** Get Capabilities */\n  async getCapabilities(\n    wmsParameters?: CSWGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<CSWCapabilities> {\n    const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    const capabilities = await CSWCapabilitiesLoader.parse(arrayBuffer, this.props.loadOptions);\n    return capabilities;\n  }\n\n  /** Get Records */\n  async getRecords(\n    wmsParameters?: CSWGetRecordsParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<CSWRecords> {\n    const url = this.getRecordsURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await CSWRecordsLoader.parse(arrayBuffer, this.props.loadOptions);\n  }\n\n  /** Get Domain */\n  async getDomain(\n    wmsParameters?: CSWGetDomainParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<CSWDomain> {\n    const url = this.getDomainURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await CSWDomainLoader.parse(arrayBuffer, this.props.loadOptions);\n  }\n\n  // Typed URL creators\n  // For applications that want full control of fetching and parsing\n\n  /** Generate a URL for the GetCapabilities request */\n  getCapabilitiesURL(\n    wmsParameters?: CSWGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<CSWGetCapabilitiesParameters> = {\n      version: '3.0.0',\n      ...wmsParameters,\n      ...vendorParameters,\n      service: 'CSW',\n      request: 'GetCapabilities'\n    };\n    return this._getCSWUrl(options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetCapabilities request */\n  getRecordsURL(\n    wmsParameters?: CSWGetRecordsParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<CSWGetRecordsParameters> = {\n      version: '3.0.0',\n      typenames: 'csw:Record',\n      ...wmsParameters,\n      ...vendorParameters,\n      service: 'CSW',\n      request: 'GetRecords'\n    };\n    return this._getCSWUrl(options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetCapabilities request */\n  getDomainURL(\n    wmsParameters?: CSWGetDomainParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<CSWGetDomainParameters> = {\n      version: '3.0.0',\n      ...wmsParameters,\n      ...vendorParameters,\n      service: 'CSW',\n      request: 'GetDomain'\n    };\n    return this._getCSWUrl(options, vendorParameters);\n  }\n\n  // INTERNAL METHODS\n\n  /**\n   * @note case _getCSWUrl may need to be overridden to handle certain backends?\n   * */\n  protected _getCSWUrl(\n    options: Record<string, unknown>,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    let url = this.props.url;\n    let first = true;\n    for (const [key, value] of Object.entries(options)) {\n      url += first ? '?' : '&';\n      first = false;\n      if (Array.isArray(value)) {\n        url += `${key.toUpperCase()}=${value.join(',')}`;\n      } else {\n        url += `${key.toUpperCase()}=${value ? String(value) : ''}`;\n      }\n    }\n    return encodeURI(url);\n  }\n\n  /** Checks for and parses a CSW XML formatted ServiceError and throws an exception */\n  protected _checkResponse(response: Response, arrayBuffer: ArrayBuffer): void {\n    const contentType = response.headers['content-type'];\n    if (!response.ok || CSWErrorLoader.mimeTypes.includes(contentType)) {\n      const error = CSWErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);\n      throw new Error(error);\n    }\n  }\n\n  /** Error situation detected */\n  protected _parseError(arrayBuffer: ArrayBuffer): Error {\n    const error = CSWErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);\n    return new Error(error);\n  }\n}\n"],"mappings":"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"}